version: '3'
services:

  vpn_node_1:
    image: vpn_node_image  # Use the pre-built Docker image
    container_name: vpn_node_1
    environment:
      - VPN_FILE=${VPN_FILE_1}
      - VPN_TYPE=${VPN_TYPE_1}
    volumes:
      - ./vpn_creds.txt:/vpn_creds.txt
      - ./ovpn_files:/ovpn_files
      - /run/user/1000/gvfs/smb-share:server=primordiallinuxhp.local,share=desktop/freedomdata/storage/docker/public_ips:/shared/public_ips
    ports:
      - "8081:8080/udp"
      - "2221:22/tcp"
      - "9091:9090/tcp"
    networks:
      vpn_network:
        ipv4_address: 172.18.0.2
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://172.18.0.2:8080 || exit 1"]  # Check if the service is running on the dynamically generated IP and port
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    
  vpn_node_2:
    image: vpn_node_image  # Use the pre-built Docker image
    container_name: vpn_node_2
    environment:
      - VPN_FILE=${VPN_FILE_2}
      - VPN_TYPE=${VPN_TYPE_2}
    volumes:
      - ./vpn_creds.txt:/vpn_creds.txt
      - ./ovpn_files:/ovpn_files
      - /run/user/1000/gvfs/smb-share:server=primordiallinuxhp.local,share=desktop/freedomdata/storage/docker/public_ips:/shared/public_ips
    ports:
      - "8082:8080/udp"
      - "2222:22/tcp"
      - "9092:9090/tcp"
    networks:
      vpn_network:
        ipv4_address: 172.18.0.3
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://172.18.0.3:8080 || exit 1"]  # Check if the service is running on the dynamically generated IP and port
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    
networks:
  vpn_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
